from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from config import TOKEN, OpenAI
from SQL.DataCardDay import CardDay
from SQL.DataUsers import Users
from SQL.HistoreCard import History, History_love
from SQL.DataAnswer import Questions, add_wisdoms, card_love
import os, random, asyncio, logging, openai, sqlite3

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
TOKEN = TOKEN
openai.api_key = OpenAI
bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)
hide_key_board = types.ReplyKeyboardRemove()
markup = types.ReplyKeyboardMarkup(one_time_keyboard=False)
markup0 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
markup0.row('–ö–∞—Ä—Ç–∞ –¥–Ω—è üé¥')
markup0.add('–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É üÄÑÔ∏è', '–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ü§ç', '–î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç–∏ ü§ì', '–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏—è üìñ')
markup0.row('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Black magician üòà')
markup1 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup1.add('–í—ã–π—Ç–∏!')
markup2 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup2.add('–í—ã—Ç—è–Ω—É—Ç—å —Ç—Ä–∏ –∫–∞—Ä—Ç—ã')
markup3 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup3.add('–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–æ—à–ª–æ–≥–æ')
markup4 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup4.add('–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –Ω—ã–Ω–µ—à–Ω–µ–≥–æ')
markup5 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup5.add('–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –±—É–¥—É—â–µ–≥–æ')
inline_btn_1 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='read')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
inline_btn_10 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='card_day')
inline_kb10 = InlineKeyboardMarkup().add(inline_btn_10)
inline_btn_2 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='history')
inline_btn_9 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='read_love')
inline_kb9 = InlineKeyboardMarkup().add(inline_btn_9)
markup10 = types.ReplyKeyboardRemove()


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, –º–µ–Ω—è –∑–æ–≤—É—Ç Black magician üòà\n–Ø —É–º–µ—é –≥–∞–¥–∞—Ç—å, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º ?üëá', reply_markup=markup0)
    data_users = Users(message.from_user.id, message.from_user.username, message.from_user.full_name)
    data_users.recorde_in_date()


@dp.message_handler(commands=['info'])
async def welcome(message: types.Message):
    await bot.send_message(message.from_user.id, 'Black magician, —Ü–µ–ª–∏—Ç–µ–ª—å –º–∞–≥–∏–∏ –∏ —Ä–∞–∑—É–º–∞\n\nüåå–î–∏—Ç—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π\n‚ôëÔ∏è–ö–æ–∑–µ—Ä–æ–≥ 12:32  21.11.2022\n\n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –º–æ–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫, –∞ –∑–∞—Ç–µ–º –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ–º–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')


class do(StatesGroup):
    add_wisdom = State()
    speaking = State()


@dp.message_handler(content_types=['text'], state=None)
async def main(message: types.Message):
    print(message.from_user.id, message.from_user.full_name, message.text)
    global name
    name = random.choice(os.listdir("parser/static/img")).split('.jpg')[0]
    if message.text == '–ö–∞—Ä—Ç–∞ –¥–Ω—è üé¥':
        con = sqlite3.connect('BlackBot.db')
        cur = con.cursor()
        time = cur.execute(f'SELECT full_time FROM card_day WHERE user_id = {message.from_user.id}').fetchall()
        global name_card
        name_card = cur.execute(f'SELECT name_card FROM card_day WHERE user_id = {message.from_user.id}').fetchall()
        def isUserDatebase():
            data = cur.execute('SELECT * FROM card_day')
            for i in data.fetchall():
                if message.from_user.id == i[0]:
                    return True
            return False
        if not isUserDatebase():
            current_datetime = datetime.now()
            await bot.send_message(message.from_user.id, 'üîÆ')
            await asyncio.sleep(3)
            await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
            with open(f'parser/static/txt/{name}.txt', 'r', encoding='utf8') as read:
                info = read.read()
                await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb1)
                card = CardDay(message.from_user.id, name, current_datetime.day)
                card.recorde_in_date()
        else:
            current_datetime = datetime.now()
            if current_datetime.day - int(time[0][0]) == 1:
                cur.execute(f'DELETE FROM card_day WHERE name_card = "{name_card[0][0]}"')
                con.commit()
                current_datetime = datetime.now()
                await bot.send_message(message.from_user.id, 'üîÆ')
                await asyncio.sleep(3)
                await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
                with open(f'parser/static/txt/{name}.txt', 'r', encoding='utf8') as read:
                    info = read.read()
                    await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb1)
                    card = CardDay(message.from_user.id, name, current_datetime.day)
                    card.recorde_in_date()
            else:
                await bot.send_message(message.from_user.id, 'üîÆ')
                await asyncio.sleep(3)
                await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name_card[0][0]}.jpg', 'rb'))
                with open(f'parser/static/txt/{name_card[0][0]}.txt', 'r', encoding='utf8') as read:
                    info = read.read()
                    await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb10)
    elif message.text == '–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É üÄÑÔ∏è':
        await bot.send_message(message.from_user.id, 'üîÆ')
        await asyncio.sleep(3)
        await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
        with open(f'parser/static/txt/{name}.txt', 'r', encoding='utf8') as read:
            info = read.read()
            await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb1)
            data_questions = Questions(message.from_user.id, message.from_user.full_name, info, name)
            data_questions.recorde_in_data()
    elif message.text == '–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏—è üìñ':
        his = History(message.from_user.id)
        his_love = History_love(message.from_user.id)
        if not his.isUserDatebase() and not his_love.isUserDatebase():
            await bot.send_message(message.from_user.id, '–í—ã –µ—â–µ –Ω–µ –≥–∞–¥–∞–ª–∏ üëø')
        elif not his_love.isUserDatebase():
            for i in range(1, 5):
                await bot.send_message(message.from_user.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Ä—Ç–∞ –¥–Ω—è üÄÑÔ∏è{his.read_card()[i-1][0][:200]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data=f'history{i}')))
        elif not his.isUserDatebase():
            for i in range(1, 5):
                await bot.send_message(message.from_user.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ü§çÔ∏è{his_love.read_card_love()[i-1][0][:200]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data=f'history_love{i}')))
        else:
            for i in range(1, 5):
                await bot.send_message(message.from_user.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—Ä—Ç–∞ –¥–Ω—è üÄÑÔ∏è{his.read_card()[i - 1][0][:200]}', reply_markup=InlineKeyboardMarkup().add( InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data=f'history{i}')))
                await bot.send_message(message.from_user.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ü§çÔ∏è{his_love.read_card_love()[i - 1][0][:200]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data=f'history_love{i}')))
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç–∏ ü§ì':
        await do.add_wisdom.set()
        await bot.send_message(message.from_user.id, '–û—Å—Ç–∞–≤—å —Å–≤–æ–π –æ—Ç–∑—ã–≤, —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∞–º –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å ‚ú®', reply_markup=markup1)
    elif message.text == '–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ü§ç':
        await bot.send_message(message.from_user.id, '–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–∞—Å—Ç –æ–±—â–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.', reply_markup=markup2)
    elif message.text == '–í—ã—Ç—è–Ω—É—Ç—å —Ç—Ä–∏ –∫–∞—Ä—Ç—ã':
        await bot.send_photo(message.from_user.id, photo=open('parser/static/taro 3 card.jpg', 'rb'))
        await bot.send_message(message.from_user.id, '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã üëá', reply_markup=markup3)
    elif message.text == '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–æ—à–ª–æ–≥–æ':
        await bot.send_message(message.from_user.id, 'üîÆ')
        await asyncio.sleep(3)
        await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
        with open(f'parser/static/txt_love/{name}.txt', 'r', encoding='utf8') as read:
            info = read.read()
            await bot.send_message(message.from_user.id, '<b>–ö–∞—Ä—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ</b>', reply_markup=markup4)
            await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb9)
            data_love = card_love(message.from_user.id, message.from_user.full_name, name, info)
            data_love.write()
    elif message.text == '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –Ω—ã–Ω–µ—à–Ω–µ–≥–æ':
        await bot.send_message(message.from_user.id, 'üîÆ')
        await asyncio.sleep(3)
        await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
        with open(f'parser/static/txt_love/{name}.txt', 'r', encoding='utf8') as read:
            info = read.read()
            await bot.send_message(message.from_user.id, '<b>–ö–∞—Ä—Ç–∞ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ</b>', reply_markup=markup5)
            await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb9)
            data_love = card_love(message.from_user.id, message.from_user.full_name, name, info)
            data_love.write()
    elif message.text == '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –±—É–¥—É—â–µ–≥–æ':
        await bot.send_message(message.from_user.id, 'üîÆ')
        await asyncio.sleep(3)
        await bot.send_photo(message.from_user.id, photo=open(f'parser/static/img/{name}.jpg', 'rb'))
        with open(f'parser/static/txt_love/{name}.txt', 'r', encoding='utf8') as read:
            info = read.read()
            await bot.send_message(message.from_user.id, '<b>–ö–∞—Ä—Ç–∞ –±—É–¥—É—â–µ–≥–æ</b>')
            await bot.send_message(message.from_user.id, info[:200], reply_markup=inline_kb9)
            await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup0)
            data_love = card_love(message.from_user.id, message.from_user.full_name, name, info)
            data_love.write()
    elif message.text == '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Black magician üòà':
        await do.speaking.set()
        await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–∏ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥!\n(–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É!)', reply_markup=markup1)
    else:
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup0)


@dp.callback_query_handler(text='card_day')
async def read_more(callback: types.CallbackQuery):
    with open(f'parser/static/txt/{name_card[0][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.message_handler(state=do.speaking)
async def add_wisdom(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['speaking'] = message.text
    if data['speaking'] == '–í—ã–π—Ç–∏!':
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup0)
        await state.finish()
    else:
        conversation = ''
        questions = data['speaking']
        conversation += '\n–ß–µ–ª–æ–≤–µ–∫: ' + questions + '\n–ò–ò:'
        response = openai.Completion.create(
            engine='davinci',
            prompt=conversation,
            temperature=0.9,
            max_tokens=150,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0.6,
            stop=['\n', '–ß–µ–ª–æ–≤–µ–∫:', '–ò–ò:']
        )
        anwer = response.choices[0].text.strip()
        conversation += anwer
        await message.reply(anwer, reply_markup=markup1)
        await do.speaking.set()


@dp.message_handler(state=do.add_wisdom)
async def add_wisdom(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_wisdom'] = message.text
    if data['add_wisdom'] == '–í—ã–π—Ç–∏!':
        await state.finish()
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup0)
    else:
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –º—É–¥—Ä–æ—Å—Ç—å!\n–Ø –ø—Ä–∏—Å–ª—É—à–∞—é—Å—å –∫ –≤–∞–º.')
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup0)
        await state.finish()
        wisdoms = add_wisdoms(message.from_user.id, message.from_user.full_name, data['add_wisdom'])
        wisdoms.write_wisdoms()


@dp.callback_query_handler(text='read')
async def read_more(callback: types.CallbackQuery):
    with open(f'parser/static/txt/{name}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='read_love')
async def read_more(callback: types.CallbackQuery):
    with open(f'parser/static/txt_love/{name}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history1')
async def read_more_history(callback: types.CallbackQuery):
    his = History(callback.from_user.id)
    with open(f'parser/static/txt/{his.read_name_card()[0][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history2')
async def read_more_history(callback: types.CallbackQuery):
    his = History(callback.from_user.id)
    with open(f'parser/static/txt/{his.read_name_card()[1][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history3')
async def read_more_history(callback: types.CallbackQuery):
    his = History(callback.from_user.id)
    with open(f'parser/static/txt/{his.read_name_card()[2][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history4')
async def read_more_history(callback: types.CallbackQuery):
    his = History(callback.from_user.id)
    with open(f'parser/static/txt/{his.read_name_card()[3][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history5')
async def read_more_history(callback: types.CallbackQuery):
    his = History(callback.from_user.id)
    with open(f'parser/static/txt/{his.read_name_card()[4][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history_love1')
async def read_more_history(callback: types.CallbackQuery):
    his_love = History_love(callback.from_user.id)
    with open(f'parser/static/txt_love/{his_love.read_name_card_love()[0][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history_love2')
async def read_more_history(callback: types.CallbackQuery):
    his_love = History_love(callback.from_user.id)
    with open(f'parser/static/txt_love/{his_love.read_name_card_love()[1][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history_love3')
async def read_more_history(callback: types.CallbackQuery):
    his_love = History_love(callback.from_user.id)
    with open(f'parser/static/txt_love/{his_love.read_name_card_love()[2][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history_love4')
async def read_more_history(callback: types.CallbackQuery):
    his_love = History_love(callback.from_user.id)
    with open(f'parser/static/txt_love/{his_love.read_name_card_love()[3][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


@dp.callback_query_handler(text='history_love5')
async def read_more_history(callback: types.CallbackQuery):
    his_love = History_love(callback.from_user.id)
    with open(f'parser/static/txt_love/{his_love.read_name_card_love()[5][0]}.txt', 'r', encoding='utf8') as read:
        info = read.read()
        if len(info) > 4096:
            await callback.message.edit_text(info[:4096])
            await bot.send_message(callback.from_user.id, info[4096:8192])
        else:
            await callback.message.edit_text(info)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
else:
    print('–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
